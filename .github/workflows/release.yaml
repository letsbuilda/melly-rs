# Release pipeline based on:
# - https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
# - https://github.com/ClementTsang/fido/blob/master/.github/workflows/deployment.yml

name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Which tag to deploy as:"
        required: true
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0

jobs:
  initialize-release-job:
    name: initialize-release-job
    runs-on: ubuntu-latest
    steps:
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual run against a tag; overriding actual tag in the environment..."
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Validate version environment variable
        run: |
          echo "Version being built against is version ${{ env.VERSION }}"!

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > release-version

      - name: Upload release-version as artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 3
          name: release-version
          path: release-version

  build-release:
    needs: [ initialize-release-job ]
    uses: ./.github/workflows/build-releases.yml

  upload-release:
    name: upload-release
    runs-on: ubuntu-latest
    needs: [build-release]
    steps:
      - name: Get release version
        uses: actions/download-artifact@v3
        with:
          name: release-version
          path: release-version

      - name: Set release version
        shell: bash
        run: |
          release_version="$(cat ./release-version/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release version
        run: |
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Get release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release
          path: release

      - name: Print out all release files
        run: |
          echo "Generated $(ls ./release | wc -l) files:"
          du -h -d 0 ./release/*
      - name: Upload all saved release files
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          tag_name: ${{ env.RELEASE_VERSION }}
          draft: true
          fail_on_unmatched_files: true
          name: ${{ env.RELEASE_VERSION }} Release
          body: |
            <!-- Write summary here -->
            ---
            ## Features
            ## Changes
            ## Bug Fixes
            ## Internal Changes
          files: |
            ./release/*
